<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Z先生的乱语]]></title>
  <link href="https://zhangyongbo.github.io/atom.xml" rel="self"/>
  <link href="https://zhangyongbo.github.io/"/>
  <updated>2019-08-10T17:28:08+08:00</updated>
  <id>https://zhangyongbo.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[JMail邮件发送]]></title>
    <link href="https://zhangyongbo.github.io/JMail%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81.html"/>
    <updated>2019-08-10T17:01:09+08:00</updated>
    <id>https://zhangyongbo.github.io/JMail%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<pre><code class="language-java">import org.apache.commons.lang3.StringUtils;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.*;
import java.io.FileOutputStream;
import java.util.*;

/**
 * @auther: 张勇波
 * @date: 2019-05-10 16:40
 * @description: smtp邮件发送工具类
 */
public class SendEmailSMTP {
    /**
     * @param args
     * @throws Exception
     */
    public static void main(String[] args) throws Exception {
        String[] fromEmail = {&quot;***@yeah.net&quot;, &quot;yeah的昵称&quot;};
        String fromEmailPWD = &quot;***&quot;;
        Map&lt;String, String&gt; toEmail = new HashMap&lt;&gt;();
        toEmail.put(&quot;***@foxmail.com&quot;, &quot;foxmail昵称&quot;);
        Map&lt;String, String&gt; ccEmail = new HashMap&lt;&gt;();
        ccEmail.put(&quot;***@bis.com.cn&quot;, &quot;bis昵称&quot;);
        String subject = &quot;带附件和带图片的的邮件4&quot;;
        String content = &quot;这是测试邮件发送&lt;br/&gt;&lt;img src=&#39;cid:Desert.jpg&#39;&gt;这是测试啊&lt;br/&gt;&lt;img src=&#39;cid:test.jpg&#39;&gt;&quot;;
        List&lt;String&gt; partList = new ArrayList&lt;&gt;();
        partList.add(&quot;D:\\测试附件.zip&quot;);
        partList.add(&quot;D:\\测试附件2asda.xlsx&quot;);
        Map&lt;String, String&gt; picMap = new HashMap&lt;&gt;();
        picMap.put(&quot;D:\\Desert.jpg&quot;, &quot;Desert.jpg&quot;);
        picMap.put(&quot;D:\\测试图片.jpg&quot;, &quot;test.jpg&quot;);
        String savePath = &quot;D:\\&quot;;
        String host = &quot;smtp.yeah.net&quot;;
        String port = &quot;25&quot;;
        sendMixedMail(host, port, fromEmail, fromEmailPWD, toEmail, ccEmail, null, subject, content, partList, picMap, savePath);
//        sendMixedMail(host, port, fromEmail, fromEmailPWD, toEmail, subject, content, null, null, null);
    }

    /**
     * 发送邮件
     *
     * @param host      smtp地址mail.smtp.host
     * @param port      smtp端口mail.smtp.port
     * @param fromEmail 发送地址，第一个值为发送邮箱地址，第二个值为昵称,没有昵称的设置为地址
     * @param fromEmail 发送邮箱的pwd
     * @param toEmail   接收地址集合（支持批量发送，key为地址，value为昵称,没有昵称的设置为地址）
     * @param ccEmail   抄送地址集合（支持批量发送，key为地址，value为昵称,没有昵称的设置为地址）没有设置为null
     * @param bccEmail  密送地址集合（支持批量发送，key为地址，value为昵称,没有昵称的设置为地址）没有设置为null
     * @param subject   主题
     * @param content   正文html格式 正文内的图片添加格式为&lt;img src=&#39;cid:Desert.jpg&#39;&gt; cid为图片的唯一标识
     * @param partList  附件集合。 如不需要设置为null即可
     * @param picMap    图片集合，地址为key ;value是邮件中使用该图片的cid，不能为中文 。如不需要设置为null即可
     * @param savePath  生成邮件物理保存地址，将会以邮件subject+时间命名。如不需要设置为null即可
     * @throws Exception
     */
    public static void sendMixedMail(String host, String port, String[] fromEmail, String fromEmailPWD, Map&lt;String, String&gt; toEmail, Map&lt;String, String&gt; ccEmail, Map&lt;String, String&gt; bccEmail, String subject, String content, List&lt;String&gt; partList, Map&lt;String, String&gt; picMap, String savePath) throws Exception {
        Properties prop = new Properties();
        prop.setProperty(&quot;mail.smtp.host&quot;, host);
        prop.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);
        prop.setProperty(&quot;mail.smtp.port&quot;, port);
        prop.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);
        Session session = Session.getInstance(prop, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(fromEmail[0], fromEmailPWD);
            }
        });
//        session.setDebug(true);
        //创建邮件
        MimeMessage message = new MimeMessage(session);
        //设置邮件的基本信息
        message.setFrom(new InternetAddress(fromEmail[0], fromEmail[1], &quot;UTF-8&quot;));
        if (toEmail != null &amp;&amp; toEmail.size() &gt; 0) {
            //配置接收邮件的地址
            Address[] addr = new Address[toEmail.size()];
            int i = 0;
            for (Map.Entry&lt;String, String&gt; stringStringEntry : toEmail.entrySet()) {
                addr[i] = new InternetAddress(stringStringEntry.getKey(), stringStringEntry.getValue(), &quot;UTF-8&quot;);
                i++;
            }
            message.setRecipients(Message.RecipientType.TO, addr);
            //处理抄送
            if (ccEmail != null &amp;&amp; ccEmail.size() &gt; 0) {
                int j = 0;
                Address[] addr2 = new Address[ccEmail.size()];
                for (Map.Entry&lt;String, String&gt; stringStringEntry : ccEmail.entrySet()) {
                    addr2[j] = new InternetAddress(stringStringEntry.getKey(), stringStringEntry.getValue(), &quot;UTF-8&quot;);
                    j++;
                }
                message.setRecipients(Message.RecipientType.CC, addr2);
            }
            //处理密送
            if (bccEmail != null &amp;&amp; bccEmail.size() &gt; 0) {
                int j = 0;
                Address[] addr2 = new Address[bccEmail.size()];
                for (Map.Entry&lt;String, String&gt; stringStringEntry : bccEmail.entrySet()) {
                    addr2[j] = new InternetAddress(stringStringEntry.getKey(), stringStringEntry.getValue(), &quot;UTF-8&quot;);
                    j++;
                }
                message.setRecipients(Message.RecipientType.BCC, addr2);
            }
            message.setSubject(subject);
            //描述关系:正文和附件
            MimeMultipart mp = new MimeMultipart();
            //描述关系:正文和图片
            MimeMultipart mp1 = new MimeMultipart();
            //正文
            MimeBodyPart text = new MimeBodyPart();
            text.setContent(content, &quot;text/html;charset=UTF-8&quot;);
            mp1.addBodyPart(text);
            if (picMap != null &amp;&amp; picMap.size() &gt; 0)
                //图片处理
                for (Map.Entry&lt;String, String&gt; entry : picMap.entrySet()) {
                    MimeBodyPart image = new MimeBodyPart();
                    image.setDataHandler(new DataHandler(new FileDataSource(entry.getKey())));
                    image.setContentID(entry.getValue());
                    mp1.addBodyPart(image);
                }
            mp1.setSubType(&quot;related&quot;);//mixed 混合; related 关联; alternative 交替
            if (partList != null &amp;&amp; partList.size() &gt; 0)
                //处理附件
                for (String s : partList) {
                    MimeBodyPart attach = new MimeBodyPart();
                    DataHandler dh = new DataHandler(new FileDataSource(s));
                    attach.setDataHandler(dh);
                    attach.setFileName(MimeUtility.encodeText(dh.getName()));
                    mp.addBodyPart(attach);
                }
            MimeBodyPart contents = new MimeBodyPart();
            contents.setContent(mp1);
            mp.addBodyPart(contents);
            mp.setSubType(&quot;mixed&quot;);
            message.setContent(mp);
            message.saveChanges();
            if (StringUtils.isNotBlank(savePath))
                //将创建好的邮件写入到磁盘以文件的形式进行保存
                message.writeTo(new FileOutputStream(savePath + subject + IDUtil.getID() + &quot;.eml&quot;));
            Transport.send(message);
        } else {
            System.out.println(&quot;--sendMixedMail--邮箱接收人不能为空&quot;);
        }
    }
}

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ID生成工具类]]></title>
    <link href="https://zhangyongbo.github.io/ID%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%B1%BB.html"/>
    <updated>2019-08-10T16:34:53+08:00</updated>
    <id>https://zhangyongbo.github.io/ID%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%B1%BB.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<pre><code class="language-java">package com.util;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

/**
 * ID生成工具类
 * 提供2种ID
 * getID() 生成18位ID，生成ID格式为:yyMMdd+12位大小写字母+数字随机字符串
 * getLongID() 生成26位ID，生成ID格式为:yyyyMMddHHmmss+12位大小写字母+数字随机字符串
 * &lt;p&gt;
 * Created by zyb on 2016/8/18.
 */
public class IDUtil {

    @SuppressWarnings({ &quot;MethodCanBeVariableArityMethod&quot;, &quot;Annotation&quot; })
    public static void main(String[] args) {
        //System.out.println(IDUtil.getID());
        //System.out.println(IDUtil.getLongID());
    }

    /**
     * 生成18位ID，生成ID格式为:yyMMdd+12位大小写字母+数字随机字符串
     *
     * @return String
     */
    public synchronized static String getID() {
        return getDate() + getRandomString(IDLENGTH);
    }

    /**
     * 生成26位ID，生成ID格式为:yyyyMMddHHmmss+12位大小写字母+数字随机字符串
     *
     * @return String
     */
    public synchronized static String getLongID() {
        return getDateTime() + getRandomString(IDLENGTH);
    }

    /**
     * 生成随机字符串的长度
     */
    private final static int IDLENGTH = 10;

    private static final char[] S_BASE64CHAR = { &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;N&#39;,
            &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;,
            &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;,
            &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;+&#39;, &#39;/&#39; };

    /**
     * 随机产生指定长度的随机字符串
     *
     * @param length int 指定生成字符串的长度
     * @return 随机字符串
     */
    private static String getRandomString(int length) {
        String base = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;
        Random random = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i &lt; length; i++) {
            int number = random.nextInt(base.length());
            sb.append(base.charAt(number));
        }
        sb.append(getTime());
        return encode(sb.toString().getBytes(), 1, 9);

    }

    @SuppressWarnings({ &quot;SameParameterValue&quot;, &quot;Annotation&quot; })
    private static String encode(byte[] data, int off, int len) {
        if (len &lt;= 0) {
            return &quot;&quot;;
        }
        char out[] = new char[(len / 3) * 4 + 4];
        int rindex = off;
        int windex = 0;
        int rest;
        for (rest = len; rest &gt;= 3; rest -= 3) {
            int i = ((data[rindex] &amp; 0xff) &lt;&lt; 16) + ((data[rindex + 1] &amp; 0xff) &lt;&lt; 8) + (data[rindex + 2] &amp; 0xff);
            out[windex++] = S_BASE64CHAR[i &gt;&gt; 18];
            out[windex++] = S_BASE64CHAR[i &gt;&gt; 12 &amp; 0x3f];
            out[windex++] = S_BASE64CHAR[i &gt;&gt; 6 &amp; 0x3f];
            out[windex++] = S_BASE64CHAR[i &amp; 0x3f];
            rindex += 3;
        }
        if (rest == 1) {
            int i = data[rindex] &amp; 0xff;
            out[windex++] = S_BASE64CHAR[i &gt;&gt; 2];
            out[windex++] = S_BASE64CHAR[i &lt;&lt; 4 &amp; 0x3f];
            out[windex++] = &#39;=&#39;;
            out[windex++] = &#39;=&#39;;
        } else if (rest == 2) {
            int i = ((data[rindex] &amp; 0xff) &lt;&lt; 8) + (data[rindex + 1] &amp; 0xff);
            out[windex++] = S_BASE64CHAR[i &gt;&gt; 10];
            out[windex++] = S_BASE64CHAR[i &gt;&gt; 4 &amp; 0x3f];
            out[windex++] = S_BASE64CHAR[i &lt;&lt; 2 &amp; 0x3f];
            out[windex++] = &#39;=&#39;;
        }
        return new String(out, 0, windex);
    }

    /**
     * 获取日期字符串，格式：20151027123026
     *
     * @return String
     */
    private static String getDateTime() {
        SimpleDateFormat df = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
        return df.format(new Date());
    }

    /**
     * 获取日期字符串，格式：151027
     *
     * @return String
     */
    private static String getDate() {
        SimpleDateFormat df = new SimpleDateFormat(&quot;yyMMdd&quot;);
        return df.format(new Date());
    }

    /**
     * 获取时间字符串（时分秒），格式：153010
     *
     * @return 时间字符串（时分秒），格式：153010
     */
    private static String getTime() {
        SimpleDateFormat df = new SimpleDateFormat(&quot;HHmmss&quot;);
        return df.format(new Date());
    }
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js时间处理工具]]></title>
    <link href="https://zhangyongbo.github.io/js%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7.html"/>
    <updated>2019-08-10T16:28:29+08:00</updated>
    <id>https://zhangyongbo.github.io/js%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<pre><code class="language-javascript">/**
 * 日期格式化
 * yyyy/yy 年
 * MM/M 月
 * E 星期
 * dd/d 日
 * HH/H 小时
 * mm/m 分钟
 * ss/s 秒
 * SS/S 毫秒
 * 除年份、星期 外的配置项 单双位表示，小于10的值是否要前面补0，双位补0，单位不补
 * @param formatStr 格式化字符串 默认为yyyy-MM-dd
 * @returns {*}
 */
Date.prototype.Format = function (formatStr) {
    var Week = [&#39;星期日&#39;, &#39;星期一&#39;, &#39;星期二&#39;, &#39;星期三&#39;, &#39;星期四&#39;, &#39;星期五&#39;, &#39;星期六&#39;];
    formatStr = formatStr.replace(/yyyy/, this.getFullYear());
    formatStr = formatStr.replace(/yy/, (this.getYear() % 100) &gt; 9 ? (this.getYear() % 100).toString() : &#39;0&#39; + (this.getYear() % 100));
    formatStr = formatStr.replace(/MM/, this.getMonth() &gt; 9 ? this.getMonth().toString() : &#39;0&#39; + this.getMonth());
    formatStr = formatStr.replace(/M/g, this.getMonth());
    formatStr = formatStr.replace(/E/g, Week[this.getDay()]);
    formatStr = formatStr.replace(/dd/, this.getDate() &gt; 9 ? this.getDate().toString() : &#39;0&#39; + this.getDate());
    formatStr = formatStr.replace(/d/g, this.getDate());
    formatStr = formatStr.replace(/HH/, this.getHours() &gt; 9 ? this.getHours().toString() : &#39;0&#39; + this.getHours());
    formatStr = formatStr.replace(/H/g, this.getHours());
    formatStr = formatStr.replace(/mm/, this.getMinutes() &gt; 9 ? this.getMinutes().toString() : &#39;0&#39; + this.getMinutes());
    formatStr = formatStr.replace(/m/g, this.getMinutes());
    formatStr = formatStr.replace(/ss/, this.getSeconds() &gt; 9 ? this.getSeconds().toString() : &#39;0&#39; + this.getSeconds());
    formatStr = formatStr.replace(/s/g, this.getSeconds());
    formatStr = formatStr.replace(/SS/, this.getMilliseconds() &gt; 9 ? this.getMilliseconds().toString() : &#39;0&#39; + this.getMilliseconds());
    formatStr = formatStr.replace(/S/g, this.getMilliseconds());
    return formatStr;
}

/**
 * 获得某月的天数
 * @param paraYear 年
 * @param paraMonth 月
 * @returns {number}
 */
function getMonthDays(paraYear, paraMonth) {
    var monthStartDate = new Date(paraYear, paraMonth - 1, 1);
    var monthEndDate = new Date(paraYear, paraMonth, 1);
    var days = (monthEndDate - monthStartDate) / 86400000;//24 * 60 * 60 * 1000
    return days;
}

/**
 * 获得某月的结束日期
 * @param paraYear 年
 * @param paraMonth 月
 * @returns {string} yyyy-MM-dd
 */
function getMonthEndDate(paraYear, paraMonth) {
    var monthEndDate = new Date(paraYear, paraMonth - 1, getMonthDays(paraYear, paraMonth));
    return monthEndDate.Format(&#39;yyyy-MM-dd&#39;);
}

/**
 * 获取某年某周的开始日期
 * @param paraYear 年
 * @param weekIndex 周数
 * @returns yyyy-MM-dd
 */
function getBeginDateOfWeek(paraYear, weekIndex) {
    var firstDay = getFirstWeekBegDay(paraYear);
    //7*24*3600000 是一星期的时间毫秒数,(JS中的日期精确到毫秒)
    var time = (weekIndex - 1) * 604800000;//7 * 24 * 3600000
    var beginDay = firstDay;
    //为日期对象 date 重新设置成时间 time
    beginDay.setTime(firstDay.valueOf() + time);
    return beginDay.Format(&#39;yyyy-MM-dd&#39;);
}


/**
 * 获取某年某周的结束日期
 * @param paraYear 年
 * @param weekIndex 周数
 * @returns yyyy-MM-dd
 */
function getEndDateOfWeek(paraYear, weekIndex) {
    var firstDay = getFirstWeekBegDay(paraYear);
    //7*24*3600000 是一星期的时间毫秒数,(JS中的日期精确到毫秒)
    var time = (weekIndex - 1) * 604800000;//7 * 24 * 3600000
    var weekTime = 518400000;//6天的毫秒数 6 * 24 * 3600000
    var endDay = firstDay;
    //为日期对象 date 重新设置成时间 time
    endDay.setTime(firstDay.valueOf() + weekTime + time);
    return endDay.Format(&#39;yyyy-MM-dd&#39;);
}

/**
 * 获取某年的第一天
 * @param {*} year 年份
 * @returns Date对象
 */
function getFirstWeekBegDay(year) {
    var tempdate = new Date(year, 0, 1);
    var temp = tempdate.getDay();
    if (temp == 1) {
        return tempdate;
    }
    temp = temp == 0 ? 7 : temp;
    tempdate = tempdate.setDate(tempdate.getDate() + (8 - temp));
    return new Date(tempdate);
}
/**
 * 获取日期为某年的第几周
 * @param date date对象
 * @returns {number} 年周位数
 */
function getWeekIndex(date) {
    var firstDay = getFirstWeekBegDay(date.getFullYear());
    if (date &lt; firstDay) {
        firstDay = getFirstWeekBegDay(date.getFullYear() - 1);
    }
    var d = Math.floor((date.valueOf() - firstDay.valueOf()) / 86400000);
    return Math.floor(d / 7) + 1;
}

/**
 * 获取2个日期之间的日期
 * @param begin 开始 yyyy-MM-dd
 * @param end 结束 yyyy-MM-dd
 * @returns {Array} yyyy-MM-dd日期数组
 */
function getDayBetween(begin, end) {
    var ab = begin.split(&quot;-&quot;);
    var ae = end.split(&quot;-&quot;);
    var db = new Date(ab[0], Number(ab[1]), Number(ab[2])).getTime();
    var de = new Date(ae[0], Number(ae[1]), Number(ae[2])).getTime();
    var result = [];
    for (var k = db; k &lt;= de;) {
        result.push(new Date(k).Format(&#39;yyyy-MM-dd&#39;));
        k += 86400000;//24 * 60 * 60 * 1000
    }
    return result;
}
/**
 * 数字转中文，0不做处理
 * 数字字符转中文，而不是数字转换中文数字
 * 2018 转换为 二0一八
 * @param num
 * @returns {string} 如：2018 转换为 二0一八
 */
function numberCharToChinese(num) {
    var china = new Array(&#39;0&#39;, &#39;一&#39;, &#39;二&#39;, &#39;三&#39;, &#39;四&#39;, &#39;五&#39;, &#39;六&#39;, &#39;七&#39;, &#39;八&#39;, &#39;九&#39;);
    var arr = &quot;&quot;;
    var english = (Number(num) + &quot;&quot;).split(&quot;&quot;);
    for (var i = 0; i &lt; english.length; i++) {
        arr += china[english[i]];
    }
    return arr;
}
/**
 * 数字转中文
 * @number {Integer} 形如123的数字
 * @return {String} 返回转换成的形如 一百二十三 的字符串
 */
function numberToChinese(number) {
    var units = &#39;个十百千万@#%亿^&amp;~&#39;;
    var chars = &#39;零一二三四五六七八九&#39;;
    var a = (number + &#39;&#39;).split(&#39;&#39;),
        s = [];
    if (a.length &gt; 12) {
        throw new Error(&#39;too big&#39;);
    } else {
        for (var i = 0, j = a.length - 1; i &lt;= j; i++) {
            if (j == 1 || j == 5 || j == 9) { //两位数 处理特殊的 1*
                if (i == 0) {
                    if (a[i] != &#39;1&#39;) s.push(chars.charAt(a[i]));
                } else {
                    s.push(chars.charAt(a[i]));
                }
            } else {
                s.push(chars.charAt(a[i]));
            }
            if (i != j) {
                s.push(units.charAt(j - i));
            }
        }
    }
    return s.join(&#39;&#39;).replace(/零([十百千万亿@#%^&amp;~])/g, function (m, d, b) { //优先处理 零百 零千 等
        b = units.indexOf(d);
        if (b != -1) {
            if (d == &#39;亿&#39;) return d;
            if (d == &#39;万&#39;) return d;
            if (a[j - b] == &#39;0&#39;) return &#39;零&#39;
        }
        return &#39;&#39;;
    }).replace(/零+/g, &#39;零&#39;).replace(/零([万亿])/g, function (m, b) { // 零百 零千处理后 可能出现 零零相连的 再处理结尾为零的
        return b;
    }).replace(/亿[万千百]/g, &#39;亿&#39;).replace(/[零]$/, &#39;&#39;).replace(/[@#%^&amp;~]/g, function (m) {
        return {
            &#39;@&#39;: &#39;十&#39;,
            &#39;#&#39;: &#39;百&#39;,
            &#39;%&#39;: &#39;千&#39;,
            &#39;^&#39;: &#39;十&#39;,
            &#39;&amp;&#39;: &#39;百&#39;,
            &#39;~&#39;: &#39;千&#39;
        }[m];
    }).replace(/([亿万])([一-九])/g, function (m, d, b, c) {
        c = units.indexOf(d);
        if (c != -1) {
            if (a[j - c] == &#39;0&#39;) return d + &#39;零&#39; + b
        }
        return m;
    });
}

/**
 * 日期转中文，1-7 周一 - 周日
 * @param weekType 类型 zhweek：星期，其它： 周
 * @param val 周数 1-7（周一 - 周日）
 * @returns {String} 星期一/周一
 */
function zhWeek(weekType, val) {
    if (weekType == &#39;zhweek&#39;) {
        weekType = &#39;星期&#39;;
    } else {
        weekType = &#39;周&#39;;
    }
    if (val == 7) {
        return weekType + &quot;日&quot;;
    } else {
        return weekType + numberCharToChinese(val);
    }
}
</code></pre>

]]></content>
  </entry>
  
</feed>
